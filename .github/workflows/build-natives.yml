name: Build & Release Native Libraries

on:
  push:
    tags:
      - 'v*'

jobs:
  build-native:
    name: Build ${{ matrix.triplet }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
            triplet: linux-x86_64
            lib_name: libinertia_native.so
            artifact_name: inertia-linux-x86_64

          - os: ubuntu-latest
            arch: aarch64
            triplet: linux-aarch64
            lib_name: libinertia_native.so
            artifact_name: inertia-linux-aarch64

          - os: windows-latest
            arch: x86_64
            triplet: windows-x64
            lib_name: inertia_native.dll
            artifact_name: inertia-windows-x64

          - os: windows-latest
            arch: arm64
            triplet: windows-arm64
            lib_name: inertia_native.dll
            artifact_name: inertia-windows-arm64

          - os: macos-latest
            arch: x86_64
            triplet: macos-x64
            lib_name: libinertia_native.dylib
            artifact_name: inertia-macos-x64

          - os: macos-latest
            arch: arm64
            triplet: macos-arm64
            lib_name: libinertia_native.dylib
            artifact_name: inertia-macos-arm64

    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache build dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ccache
            ~/AppData/Local/ccache
            native/build
          key: build-cache-${{ matrix.triplet }}-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake', '**/*.cpp', '**/*.h', '**/*.c') }}
          restore-keys: |
            build-cache-${{ matrix.triplet }}-
            build-cache-

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ matrix.triplet }}
          max-size: 500M

      - name: Install cross-compilation tools (only for aarch64)
        if: matrix.arch == 'aarch64'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Create build directory
        run: cmake -E make_directory native/build

      - name: Configure CMake
        shell: bash
        working-directory: native/build
        run: |
          CMAKE_CMD="cmake .. -DCMAKE_BUILD_TYPE=Release"
          
          # Add ccache support
          if command -v ccache >/dev/null 2>&1; then
            CMAKE_CMD="$CMAKE_CMD -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache"
          fi
          
          if [[ "${{ matrix.arch }}" == "aarch64" ]]; then
            CMAKE_CMD="$CMAKE_CMD \
              -DCMAKE_SYSTEM_NAME=Linux \
              -DCMAKE_SYSTEM_PROCESSOR=aarch64 \
              -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc \
              -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++ \
              -DCMAKE_FIND_ROOT_PATH=/usr/aarch64-linux-gnu \
              -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER \
              -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY \
              -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY \
              -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
              -DCMAKE_CXX_FLAGS='-fPIC -march=armv8-a' \
              -DUSE_SSE4_1=OFF -DUSE_SSE4_2=OFF -DUSE_AVX=OFF \
              -DUSE_AVX2=OFF -DUSE_AVX512=OFF -DUSE_LZCNT=OFF \
              -DUSE_TZCNT=OFF -DUSE_F16C=OFF -DUSE_FMADD=OFF"
          fi
          
          if [[ "${{ matrix.os }}" == "ubuntu-latest" && "${{ matrix.arch }}" != "aarch64" ]]; then
            CMAKE_CMD="$CMAKE_CMD \
              -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
              -DCMAKE_CXX_FLAGS='-fPIC'"
          fi
          
          if [[ "${{ matrix.os }}" == "macos-latest" && "${{ matrix.arch }}" == "arm64" ]]; then
            CMAKE_CMD="$CMAKE_CMD \
              -DCMAKE_OSX_ARCHITECTURES=arm64 \
              -DCMAKE_DISABLE_PRECOMPILE_HEADERS=ON"
          fi
          
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            CMAKE_CMD="$CMAKE_CMD -DUSE_STATIC_MSVC_RUNTIME_LIBRARY=OFF"
          fi
          
          echo "Running: $CMAKE_CMD"
          eval $CMAKE_CMD

      - name: Build
        shell: bash
        working-directory: native/build
        run: |
          # Определяем количество ядер для параллельной сборки
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            CORES=$(nproc)
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            CORES=$(sysctl -n hw.ncpu)
          elif [[ "${{ runner.os }}" == "Windows" ]]; then
            CORES=$NUMBER_OF_PROCESSORS
          else
            CORES=2
          fi
          
          echo "Building with $CORES cores"
          
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cmake --build . --config Release --parallel $CORES
          else
            cmake --build . --parallel $CORES
          fi

      - name: Archive native library
        shell: bash
        run: |
          cd native/build
          
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            # Windows: библиотека в папке Release
            7z a "${{ matrix.artifact_name }}.zip" "Release/${{ matrix.lib_name }}"
          else
            # Unix: библиотека в корне build директории
            zip "${{ matrix.artifact_name }}.zip" "${{ matrix.lib_name }}"
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: native/build/${{ matrix.artifact_name }}.zip
          retention-days: 1

  release:
    name: Create GitHub Release
    needs: build-native
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/*/*.zip
          fail_on_unmatched_files: false