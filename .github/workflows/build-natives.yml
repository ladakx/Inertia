name: Build & Release Native Libraries

on:
  push:
    tags:
      - 'v*'

jobs:
  build-natives:
    name: Build for ${{ matrix.os }} (${{ matrix.arch }})
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
            artifact_name: inertia-native-linux-x86_64
            lib_name: libinertia_native.so
          - os: ubuntu-latest
            arch: aarch64
            artifact_name: inertia-native-linux-aarch64
            lib_name: libinertia_native.so
          - os: windows-latest
            arch: x86_64
            artifact_name: inertia-native-windows-x86_64
            lib_name: inertia_native.dll
          - os: macos-latest
            arch: aarch64
            artifact_name: inertia-native-darwin-aarch64
            lib_name: libinertia_native.dylib

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Set up cross-compilation for Linux aarch64
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'aarch64'
        run: |
          sudo apt-get update
          sudo apt-get install -y g++-aarch64-linux-gnu

      - name: Create Build Directory
        run: cmake -E make_directory ${{ github.workspace }}/native/build

      - name: Configure CMake
        shell: bash
        working-directory: ${{ github.workspace }}/native/build
        run: |
          CMAKE_CMD="cmake .. -DCMAKE_BUILD_TYPE=Release"
          
          if [[ "${{ matrix.arch }}" == "aarch64" ]]; then
            CMAKE_CMD="$CMAKE_CMD \
              -DUSE_SSE4_1=OFF \
              -DUSE_SSE4_2=OFF \
              -DUSE_AVX=OFF \
              -DUSE_AVX2=OFF \
              -DUSE_AVX512=OFF \
              -DUSE_LZCNT=OFF \
              -DUSE_TZCNT=OFF \
              -DUSE_F16C=OFF \
              -DUSE_FMADD=OFF"
          fi
          
          if [[ "${{ matrix.os }}" == "ubuntu-latest" && "${{ matrix.arch }}" == "aarch64" ]]; then
            CMAKE_CMD="$CMAKE_CMD \
              -DCROSS_COMPILE_ARM=ON \
              -DCROSS_COMPILE_ARM_TARGET=aarch64-linux-gnu \
              -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc \
              -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++"
          fi
          
          if [[ "${{ matrix.os }}" == "macos-latest" && "${{ matrix.arch }}" == "aarch64" ]]; then
            CMAKE_CMD="$CMAKE_CMD \
              -DCMAKE_OSX_ARCHITECTURES=arm64 \
              -DCMAKE_DISABLE_PRECOMPILE_HEADERS=ON"
          fi
          
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            CMAKE_CMD="$CMAKE_CMD -DUSE_STATIC_MSVC_RUNTIME_LIBRARY=OFF"
          fi
          
          echo "Running CMake command: $CMAKE_CMD"
          $CMAKE_CMD

      - name: Build Native Library
        working-directory: ${{ github.workspace }}/native/build
        run: cmake --build . --config Release

      - name: Archive native library
        shell: bash
        run: |
          cd ${{ github.workspace }}/native/build/
          mkdir -p artifact
          mv ${{ matrix.lib_name }} artifact/
          cd artifact
          zip ../${{ matrix.artifact_name }}.zip ./*

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ github.workspace }}/native/build/${{ matrix.artifact_name }}.zip

  release:
    name: Create GitHub Release
    needs: build-natives
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/*/*.zip