name: Build & Release Native Libraries

on:
  push:
    tags:
      - 'v*'

jobs:
  build-native:
    name: Build ${{ matrix.triplet }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
            triplet: linux-x86_64
            lib_name: libinertia_native.so
            artifact_name: inertia-linux-x86_64

          - os: ubuntu-latest
            arch: aarch64
            triplet: linux-aarch64
            lib_name: libinertia_native.so
            artifact_name: inertia-linux-aarch64

          - os: windows-latest
            arch: x86_64
            triplet: windows-x64
            lib_name: inertia_native.dll
            artifact_name: inertia-windows-x64

          - os: windows-latest
            arch: arm64
            triplet: windows-arm64
            lib_name: inertia_native.dll
            artifact_name: inertia-windows-arm64

          - os: macos-latest
            arch: x86_64
            triplet: macos-x64
            lib_name: libinertia_native.dylib
            artifact_name: inertia-macos-x64

          - os: macos-latest
            arch: arm64
            triplet: macos-arm64
            lib_name: libinertia_native.dylib
            artifact_name: inertia-macos-arm64

    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Create build directory
        run: cmake -E make_directory native/build

      - name: Install Zig (only for aarch64)
        if: matrix.arch == 'aarch64'
        run: |
          curl -L https://ziglang.org/builds/zig-linux-x86_64-0.12.0-dev.2633+0596df91e.tar.xz | tar -xJ
          echo "ZIG_CC=$(pwd)/zig-linux-x86_64-0.12.0-dev.2633+0596df91e/zig cc" >> $GITHUB_ENV
          echo "ZIG_CXX=$(pwd)/zig-linux-x86_64-0.12.0-dev.2633+0596df91e/zig c++" >> $GITHUB_ENV

      - name: Configure CMake
        shell: bash
        working-directory: native/build
        run: |
          CMAKE_CMD="cmake .. -DCMAKE_BUILD_TYPE=Release"

          if [[ "${{ matrix.arch }}" == "aarch64" ]]; then
            CMAKE_CMD="$CMAKE_CMD \
              -DCMAKE_C_COMPILER=\"$ZIG_CC\" \
              -DCMAKE_CXX_COMPILER=\"$ZIG_CXX\" \
              -DCMAKE_SYSTEM_NAME=Linux \
              -DCMAKE_SYSTEM_PROCESSOR=aarch64 \
              -DUSE_SSE4_1=OFF -DUSE_SSE4_2=OFF -DUSE_AVX=OFF \
              -DUSE_AVX2=OFF -DUSE_AVX512=OFF -DUSE_LZCNT=OFF \
              -DUSE_TZCNT=OFF -DUSE_F16C=OFF -DUSE_FMADD=OFF"
          fi

          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            CMAKE_CMD="$CMAKE_CMD \
              -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
              -DCMAKE_CXX_FLAGS='-fPIC'"
          fi

          if [[ "${{ matrix.os }}" == "macos-latest" && "${{ matrix.arch }}" == "arm64" ]]; then
            CMAKE_CMD="$CMAKE_CMD \
              -DCMAKE_OSX_ARCHITECTURES=arm64 \
              -DCMAKE_DISABLE_PRECOMPILE_HEADERS=ON"
          fi

          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            CMAKE_CMD="$CMAKE_CMD -DUSE_STATIC_MSVC_RUNTIME_LIBRARY=OFF"
          fi

          echo "Running: $CMAKE_CMD"
          eval $CMAKE_CMD

      - name: Build
        shell: bash
        working-directory: native/build
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cmake --build . --config Release
          else
            cmake --build .
          fi

      - name: Archive native library (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          ARTIFACT_DIR="${{ github.workspace }}/native/build/artifact"
          mkdir -p "$ARTIFACT_DIR"

          if [[ "$RUNNER_OS" == "macOS" ]]; then
            LIB_NAME="libinertia_native.dylib"
          else
            LIB_NAME="libinertia_native.so"
          fi

          cp "${{ github.workspace }}/native/build/${LIB_NAME}" "$ARTIFACT_DIR"
          cd "$ARTIFACT_DIR"
          zip "../${{ matrix.artifact_name }}.zip" ./*

      - name: Archive native library (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $BuildDir = "${{ github.workspace }}\native\build\Release"
          $ArtifactDir = "${{ github.workspace }}\native\build\artifact"
          New-Item -ItemType Directory -Force -Path $ArtifactDir
          Copy-Item "$BuildDir\${{ matrix.lib_name }}" -Destination $ArtifactDir
          Compress-Archive -Path "$ArtifactDir\*" -DestinationPath "${{ github.workspace }}\native\build\${{ matrix.artifact_name }}.zip"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: native/build/${{ matrix.artifact_name }}.zip

  release:
    name: Create GitHub Release
    needs: build-native
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/*/*.zip