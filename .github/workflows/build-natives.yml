name: Build & Release Native Libraries

on:
  push:
    tags:
      - 'v*'

jobs:
  build-natives:
    name: Build for ${{ matrix.os_name }} (${{ matrix.arch }})
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            os_name: linux
            arch: x86_64
            lib_name: libinertia_native.so
          - os: ubuntu-latest
            os_name: linux
            arch: aarch64
            lib_name: libinertia_native.so
          - os: windows-latest
            os_name: windows
            arch: x64
            lib_name: inertia_native.dll
          - os: macos-latest
            os_name: macos
            arch: x64
            lib_name: libinertia_native.dylib
          - os: macos-latest
            os_name: macos
            arch: arm64
            lib_name: libinertia_native.dylib

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Set up cross-compilation for Linux aarch64
        if: matrix.os_name == 'linux' && matrix.arch == 'aarch64'
        run: |
          sudo apt-get update
          sudo apt-get install -y g++-aarch64-linux-gnu

      - name: Create Build Directory
        run: cmake -E make_directory ${{ github.workspace }}/native/build

      - name: Configure CMake
        shell: bash
        working-directory: ${{ github.workspace }}/native/build
        run: |
          CMAKE_CMD="cmake .. -DCMAKE_BUILD_TYPE=Release"
          
          # --- ФІНАЛЬНЕ ВИПРАВЛЕННЯ ---
          # Застосовуємо статичне лінкування ТІЛЬКИ для Linux
          if [[ "${{ matrix.os_name }}" == "linux" ]]; then
            CMAKE_CMD="$CMAKE_CMD -DCMAKE_EXE_LINKER_FLAGS='-static-libstdc++ -static-libgcc' -DCMAKE_SHARED_LINKER_FLAGS='-static-libstdc++ -static-libgcc'"
          fi
          
          if [[ "${{ matrix.os_name }}" == 'linux' && "${{ matrix.arch }}" == 'aarch64' ]]; then
            CMAKE_CMD="$CMAKE_CMD -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++"
          fi
          
          if [[ "${{ matrix.os_name }}" == "macos" ]]; then
              CMAKE_CMD="$CMAKE_CMD -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch }}"
          fi
          
          echo "Running CMake command: $CMAKE_CMD"
          $CMAKE_CMD

      - name: Build Native Library
        working-directory: ${{ github.workspace }}/native/build
        run: cmake --build . --config Release

      - name: Archive native library
        shell: bash
        run: |
          cd ${{ github.workspace }}/native/build/
          ARTIFACT_NAME="inertia-${{ matrix.os_name }}-${{ matrix.arch }}"
          mkdir -p artifact
          mv ${{ matrix.lib_name }} artifact/
          cd artifact
          zip ../$ARTIFACT_NAME.zip ./*

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          # Важливо: назва артефакту тепер теж динамічна
          name: inertia-${{ matrix.os_name }}-${{ matrix.arch }}
          path: ${{ github.workspace }}/native/build/inertia-${{ matrix.os_name }}-${{ matrix.arch }}.zip

  release:
    name: Create GitHub Release
    needs: build-natives
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/*/*.zip